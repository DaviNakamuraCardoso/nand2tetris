class Game {

    field Grid grid;
    field ShapeManager sm;

    constructor Game new() {

        let grid = Grid.new(31, 15);
        let sm = ShapeManager.new(grid);
        return this;
    }

    function boolean isOver() {
        return Keyboard.keyPressed() = 82;
    }

    function void over() {

        do Screen.clearScreen();
        do Output.moveCursor(10, 28);
        do Output.printString("Game Over");
        do Output.println();
        do Output.moveCursor(12, 22);
        do Output.printString("Press r to play again");

        do grid.clear();

        while (~Game.isOver()) {}

        return;
    }

    function void init() {
        var String tetris, credits, instruction;

        do Screen.clearScreen();

        let tetris = "TETRIS";
        let credits = "by Davi Nakamura Cardoso";
        let instruction = "Press p to play";

        do Output.moveCursor(9, 32 - (tetris.length() / 2));
        do Output.printString(tetris);

        do Output.moveCursor(11, 32 - (credits.length() / 2));
        do Output.printString(credits);

        do Output.moveCursor(13, 32 - (instruction.length() / 2));
        do Output.printString(instruction);

        do tetris.dispose();
        do credits.dispose();
        do instruction.dispose();

        while (~Game.start()) {}

        return;
    }

    function boolean start() {
        var char key;

        let key = Keyboard.keyPressed();

        return (key = 80);
    }

    function void update() {
        var boolean status;
        var int counter;

        let status = true;
        let counter = 1;

        while (status) {

            let status = sm.render(counter);
            do grid.render();
            do Sys.wait(300);
            let counter = counter + 1;
            if (counter > 4) { let counter = 0; }
        }
        return;
    }

    method void loop() {

        do Game.init();
        do Game.update();
        do Game.over();
        return;
    }
}
