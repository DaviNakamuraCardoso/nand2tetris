class Shape {

    field Grid grid;
    field Array blocks;
    field int x, y, direction, type;
    field ShapeRenderer renderer;
    static int SHAPE_SIZE;

    constructor Shape new(Grid g, int t) {

        let SHAPE_SIZE = 4;
        let grid = g;
        let x = -1; let y = 7; let direction = 0;
        let type = t;
        let renderer = ShapeRenderer.new(this);
        do initBlocks();

        return this;
    }

    method void initBlocks() {
        var int i;
        var Block current;

        let blocks = Array.new(SHAPE_SIZE);

        let i = 0; while (i < SHAPE_SIZE) {

            let current = Block.new(grid, this);
            let blocks[i] = current;

            let i = i + 1;
        }
        return;
    }

    method void moveUp() {
        let y = Math.max(0, y - 1);
        return;
    }

    method void moveDown() {
        let y = Math.min(grid.getHeight()-1, y + 1);
        return;
    }

    method void turnLeft() {
        if (direction = 3) { let direction = 0; return; }
        let direction = direction + 1;
        return;
    }

    method void turnRight() {
        if (direction = 0) { let direction = 3; return; }
        let direction = direction - 1;
        return;
    }

    method void listenKeys() {

        var char key;
        let key = Keyboard.keyPressed();

        if ((key = 83) | (key = 133)) { do moveDown(); }  // Goes up when 'S' or DownArrow is pressed
        if ((key = 87) | (key = 131)) { do moveUp(); }    // Goes down when 'W'  or UpArrow is pressed
        if ((key = 65) | (key = 130)) { do turnLeft(); }  // Turns left when 'A' or LeftArrow is pressed
        if ((key = 68) | (key = 132)) { do turnRight(); } // Turns right when 'D' or RightArrow is pressed

        return;
    }


    method Grid getGrid() {
        return grid;
    }

    method boolean render() {
        var int i;
        var Block tmp;

        do listenKeys();

        return renderer.render();
    }

    method Block getBlock(int i) { return blocks[i]; }
    method int getX() { return x; }
    method int getY() { return y; }
    method int getType() { return type; }
    method int getDirection() { return direction; }

    method void incX() { let x = x + 1; return; }
    method void decX() { let x = x - 1; return; }

    method boolean isMine(int sx, int sy) {
        var int i;
        var Block b;

        let i = 0; while (i < 4) {
            let b = blocks[i];

            if ((b.getX() = sx) & (b.getY() = sy)) { return true; }
            let i = i + 1;
        }

        return false;
    }

    method void dispose() {
        var int i;
        var Block b;

        let i = 0; while (i < 4) {
            let b = blocks[i];
            do b.dispose();
            let i = i + 1;
        }
        do blocks.dispose();
        do renderer.dispose(); 
        do Memory.deAlloc(this);
        return;
    }
}
