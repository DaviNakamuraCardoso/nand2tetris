/**
*
*       Matrix class for Project 09 of Nand2tetris
*
*/

class Matrix {
    field int width, height, counter;
    field Array columns;
    field List blocks;

    // Builds a new Matrix object based on width and height
    constructor Matrix new(int w, int h) {

        // Basic fields
        let width = w;
        let height = h;

        // Creates a new matrix
        let columns = Matrix.buildMatrix(w, h);

        let counter = 0;

        let blocks = null;

        return this;

    }

    // Accessors
    method int getWidth() { return width; }
    method int getHeight() { return height; }

    // Builds a new matrix filled with zeros
    function Array buildMatrix(int width, int height) {
        var Array m;
        var int i;

        let m = Array.new(width);

        // Builds an array for each column
        while (i < width) {
            let m[i] = Matrix.buildArray(height);
            let i = i + 1;
        }

        return m;
    }


    // Builds a new array filled with zeros
    function Array buildArray(int length) {
        var Array a;
        var int i;

        let a = Array.new(length);

        // Set all the members to zero
        while (i < length) {
            let a[i] = 0;
            let i = i + 1;
        }

        return a;
    }

    // Get a given row
    method Array getRow(int col, int row) {
        var Array a;

        // Returns -1 if the cell is out of bounds
        if (isSafe(col, row) = 0) {
            do Matrix.ArrayOutOfBoundsError();
        }

        // Surpasses the matrix assignment limitation
        let a = columns[col];

        return a;

    }

    method void render() {
        var int i;

        let i = 0;

        while (i < (getWidth() - 1)) {
            do renderColumn(i);
            let i = i + 1;
        }

        return;
    }


    method void renderColumn(int col) {
        var int j;

        let j = 0;

        while (j < (getHeight() - 1)) {

            if (getCell(col, j) = 1) { do Screen.setColor(false);}
            else { do Screen.setColor(true); }

            do Screen.drawRectangle(col * 8, j * 8, (col+1) * 8, (j+1) * 8);

            let j = j + 1;
        }
        return;
    }

    method void update() {
        let counter = counter + 1;
        do updateBlocks();
        return;
    }

    method void updateBlocks() {
        if (counter > 200) {
            let counter = 0;
            do createBlock();
        }

        do updateAllBlocks();

        return;
    }

    // Returns the value of a given cell
    method int getCell(int col, int row) {

        var int ret;
        var Array tmp;

        let tmp = getRow(col, row);
        let ret = tmp[row];

        return ret;
    }

    // Updates a cell value
    method void setCell(int col, int row, int value) {

        var Array tmp;

        // Get a row
        let tmp = getRow(col, row);

        // Change the cell value
        let tmp[row] = value;

        return;
    }


    // Returns 0 if the cell is out of bounds and 1 if not
    method int isSafe(int col, int row) {

        // Checks the column
        if ((col > width) | (col < 0)) { return 0; }

        // Checks the row
        if ((row > height) | (row < 0)) { return 0; }

        return 1;
    }

    method void print() {
        return;
    }

    // Adds a new block to the game
    method void createBlock() {
        var Block b;
        var List n;

        // Creates a block and a list
        let b = Block.new(73, this);
        let n = List.new(b, null);

        // Adds the block to the block list
        do blocks.add(n);

        return;
    }

    method void updateAllBlocks() {
        var List current;
        var Block b;

        let current = blocks;
        while (~(current = null)) {
            let b = current.getData();
            do b.render();
            let current = current.getNext();

        }

        return;
    }


    function void ArrayOutOfBoundsError() {
        // Prints an error message
        do Output.printString("Array out of bounds");
        do Output.println();

        // Raises an error
        do Sys.error(2);

        return;
    }
}
