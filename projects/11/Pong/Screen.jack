// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i, ram;

        let ram = 0;

        let i = 16384; while (i < 24575) {
            let ram[i] = false;
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b; return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, new, n;

        let address = Screen.coords(x, y);
        let value = Memory.peek(address);
        let new = Math.modulo(x, 16);

        let n = Math.set(value, new, color);

        do Memory.poke(address, n);


        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {

        var int a, b, diff, dx, dy, tmp, normal, keep;

        // Special cases
        if (x1 = x2) { do Screen.drawVertical(x1, y1, y2); return; }
        if (y1 = y2) { do Screen.drawHorizontal(Math.min(x1, x2), Math.max(x1, x2), y1); return; }

        // Swap coords if (x1,y1) is to the right
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;

            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        let normal = y1 > y2;

        if (normal) {
            let keep = (b > dy) | (b = dy);
        } else {
            let keep = (b < dy) | (b = dy);
        }

        while (((a < dx) | (a = dx)) & (keep)) {
            do Screen.drawPixel(x1+a, y1+b);

            if (diff < 0) {
                 let a = a + 1;
                 if (normal) {
                     let diff = diff - dy;
                 } else {
                     let diff = diff + dy;
                 }

            } else {
                if (normal) {
                    let b = b - 1;
                    let diff = diff - dx;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }

            if (normal) {
                let keep = (b > dy) | (b = dy);
            } else {
                let keep = (b < dy) | (b = dy);
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;

        if (x1 = x2) {
            do Screen.drawVertical(x1, y1, y2); return; 
        }

        let i = y1; while (i < (y2+1)) {
            do Screen.drawHorizontal(x1, x2, i);
            let i = i + 1;
        }

        return;
    }

    function void drawVertical(int x, int y1, int y2) {
        var int i, mod, addr, start, end, val;

        let start = Math.min(y1, y2); let end = Math.max(y1, y2);

        let mod = Math.modulo(x, 16);

        let i = start; while (i < end) {
            let addr = Screen.coords(x, i);
            let val = Memory.peek(addr);
            let val = Math.set(val, mod, color);

            do Memory.poke(addr, val);

            let i = i + 1;
        }

        return;
    }

    function int coords(int x, int y) {
        return (16384 + (32 * y) + (x / 16));
    }

    function void drawHorizontal(int x1, int x2, int y) {
        var int mod, mod2, v1, v2, i, address, address2, max;

        let address = Screen.coords(x1, y);
        let address2 = Screen.coords(x2, y);

        let mod = Math.modulo(x1, 16);
        let mod2 = Math.modulo(x2, 16);

        if (address = address2) { let max = mod2; }
        else { let max = 16; }


        let v1 = Memory.peek(address);

        let i = mod; while (i < max) {
            let v1 = Math.set(v1, i, color);
            let i = i + 1;
        }

        do Memory.poke(address, v1);

        if (address = address2) { return; }

        let mod = Math.modulo(x2, 16);

        let v2 = Memory.peek(address2);

        let i = 0; while (i < mod) {
            let v2 = Math.set(v2, i, color);
            let i = i + 1;
        }

        do Memory.poke(address2, v2);

        let i = Screen.coords(x1, y) + 1;
        let v2 = Screen.coords(x2, y);

        while (i < v2) {
            do Memory.poke(i, color);
            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i, j, dx, dy, rsquared;

        if (r > 181) { return; }

        // r^2 = (dx/2)^2 + dy^2

        let rsquared = Math.pow(r);
        let i = -r; while (i < (r + 1)) {
            let dx = Math.sqrt(rsquared - Math.pow(i));
            do Screen.drawHorizontal(x-dx, x+dx, y+i);
            let i = i + 1;
        }


        return;
    }
}
