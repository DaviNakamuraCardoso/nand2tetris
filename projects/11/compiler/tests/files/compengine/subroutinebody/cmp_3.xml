<subroutineBody>
	<symbol> { </symbol>
	<varDec>
		<keyword> var </keyword>
		<keyword> int </keyword>
		<identifier> i </identifier>
		<symbol> ; </symbol>
	</varDec>
	<varDec>
		<keyword> var </keyword>
		<keyword> boolean </keyword>
		<identifier> b </identifier>
		<symbol> , </symbol>
		<identifier> b2 </identifier>
		<symbol> ; </symbol>
	</varDec>
	<statements>
		<whileStatement>
			<keyword> while </keyword>
			<symbol> ( </symbol>
			<expression>
				<term>
				</term>
			</expression>
			<symbol> ) </symbol>
			<symbol> { </symbol>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<subroutineCall>
								<identifier> Vera </identifier>
								<symbol> . </symbol>
								<identifier> sing </identifier>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<stringConstant> Who's sorry now? </stringConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
							</subroutineCall>
							<symbol> ; </symbol>
						</doStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> a </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
			</statements>
			<symbol> } </symbol>
		</whileStatement>
		<returnStatement>
			<keyword> return </keyword>
			<symbol> ; </symbol>
		</returnStatement>
	</statements>
	<symbol> } </symbol>
</subroutineBody>
