// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram, heap;
    static int free;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let free = 2048;

        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    function int getFree() { return free; }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value; return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        // Current memory segment
        var int current, new, segsize;
        let current = free;

        while (~(current = 0)) {
            // Free memory
            let segsize = current[1];
            if ((segsize > (size + 2)) | (segsize = (size + 2))) {

                // Sets the pointer for the new object at the bottom of the segment
                let new = current + segsize - size - 2;

                // Resets the size of the free segment
                let current[1] = segsize - size - 2;

                let new[0] = 0;
                let new[1] = size - 2;

                // Return the base pointer to the caller
                return new+2;

            } else {
                let current = current[0];
            }
        }

        do Sys.error(1);
        return -1;


    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

        let o[-2] = free;
        let free = o-2;

        return;

    }
}
